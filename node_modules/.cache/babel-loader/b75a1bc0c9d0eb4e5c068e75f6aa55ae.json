{"ast":null,"code":"var _jsxFileName = \"/Users/olgasivyuk/dev/mesto-react/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { api } from \"../utils/Api.js\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport ImagePopup from \"./ImagePopup\";\nimport DeleteCardConfirmPopup from \"./DeleteCardConfirmPopup\";\nimport Footer from \"./Footer\";\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isDeleteCardConfirmPopupOpen, setIsDeleteCardConfirmPopupOpen] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [currentUser, setCurrentUser] = useState({});\n  const [cards, setCards] = useState([]);\n  const [removeCard, setRemoveCard] = useState(null);\n  useEffect(() => {\n    api.getProfile().then(userData => {\n      setCurrentUser({ ...userData,\n        userName: userData.name,\n        userDescription: userData.about,\n        userAvatar: userData.avatar\n      });\n    }).catch(err => console.log(`Ошибка...: ${err}`));\n  }, []);\n\n  function handleUpdateUser(_ref) {\n    let {\n      name,\n      about\n    } = _ref;\n    api.editProfile(name, about).then(userData => {\n      setCurrentUser({ ...userData,\n        userName: userData.name,\n        userDescription: userData.about,\n        userAvatar: userData.avatar\n      });\n      closeAllPopups();\n    }).catch(err => console.error(`Ошибка...: ${err}`));\n  }\n\n  ;\n\n  function handleUpdateAvatar(_ref2) {\n    let {\n      avatar\n    } = _ref2;\n    api.editProfileAvatar(avatar).then(userData => {\n      setCurrentUser({ ...userData,\n        userAvatar: userData.avatar\n      });\n      closeAllPopups();\n    }).catch(err => console.error(`Ошибка...: ${err}`));\n  }\n\n  ;\n  useEffect(() => {\n    api.getUsersCards().then(cardList => {\n      //console.log(\"res\", cardList)\n      const usersCard = cardList.map(card => {\n        return {\n          name: card.name,\n          link: card.link,\n          likes: card.likes,\n          cardId: card._id,\n          ownerId: card.owner._id\n        };\n      }); //console.log('usersCard', usersCard)\n\n      setCards(usersCard);\n    }).catch(err => console.log(`Ошибка...: ${err}`));\n  }, []);\n\n  function handleAddPlaceSubmit(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    api.addNewCard(name, link).then(newCard => {\n      setCards([{\n        name: newCard.name,\n        link: newCard.link,\n        likes: newCard.likes,\n        cardId: newCard._id,\n        ownerId: newCard.owner._id\n      }, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.error(`Ошибка...: ${err}`));\n  }\n\n  ;\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(user => user._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n    //   // Отправляем запрос в API и получаем обновлённые данные карточки\n    //   api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n    //     setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n    // });\n\n    if (isLiked) {\n      //если карточка с лайком ==> удали лайк\n      api.deleteLike(card.cardId).then(newCard => {\n        setCards(state => state.map(item => {\n          if (item.cardId === card.cardId) {\n            return {\n              name: newCard.name,\n              link: newCard.link,\n              likes: newCard.likes,\n              cardId: newCard._id,\n              ownerId: newCard.owner._id\n            };\n          } else return item;\n        } // item.cardId === card.cardId ? newCard : item\n        ));\n      }).catch(err => console.log(`Ошибка...: ${err}`));\n    } else {\n      // если лайка нет ==> поставь лайк\n      api.addLike(card.cardId).then(newCard => {\n        //console.log(' поставить лайк', newCard)\n        setCards(stateCards => stateCards.map(item => {\n          if (item.cardId === card.cardId) {\n            return {\n              name: newCard.name,\n              link: newCard.link,\n              likes: newCard.likes,\n              cardId: newCard._id,\n              ownerId: newCard.owner._id\n            };\n          } else return item;\n        } //item.cardId === card.cardId ? newCard : item\n        ));\n      }).catch(err => console.log(`Ошибка...: ${err}`));\n    }\n  }\n\n  ;\n\n  function handleDeleteCard() {\n    api.deleteCard(removeCard.cardId) //console.log('pr', removeCard.cardId)\n    .then(() => {\n      //console.log('удалить карточку', res)\n      setCards(stateCards => stateCards.filter(item => item.cardId !== removeCard.cardId));\n      closeAllPopups();\n    }).catch(err => console.log(`Ошибка...: ${err}`));\n  }\n\n  ;\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  ;\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  ;\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  ;\n\n  function handleCardClick(card) {\n    // console.log(selectedCard)\n    setSelectedCard(card);\n  }\n\n  ;\n\n  function handleTrashbinClick(card) {\n    setIsDeleteCardConfirmPopupOpen(true);\n    setRemoveCard(card);\n  }\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n    setIsDeleteCardConfirmPopupOpen(false);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Main, {\n        onEditAvatar: handleEditAvatarClick,\n        onEditProfile: handleEditProfileClick,\n        onAddPlace: handleAddPlaceClick,\n        onCardClick: handleCardClick,\n        onCardLike: handleCardLike // onCardDelete={handleDeleteCard} // меняем механику, переносим в компонент DeleteCardConfirmPopup\n        ,\n        onCardDelete: handleTrashbinClick,\n        cards: cards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlaceSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DeleteCardConfirmPopup, {\n        isOpen: isDeleteCardConfirmPopupOpen,\n        onClose: closeAllPopups,\n        onConfirmCardDelete: handleDeleteCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"2eYZIxncAjvuyybIgQ3Zsj0uZt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/olgasivyuk/dev/mesto-react/src/components/App.js"],"names":["React","useState","useEffect","api","Header","Main","EditProfilePopup","EditAvatarPopup","AddPlacePopup","ImagePopup","DeleteCardConfirmPopup","Footer","CurrentUserContext","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isDeleteCardConfirmPopupOpen","setIsDeleteCardConfirmPopupOpen","selectedCard","setSelectedCard","currentUser","setCurrentUser","cards","setCards","removeCard","setRemoveCard","getProfile","then","userData","userName","name","userDescription","about","userAvatar","avatar","catch","err","console","log","handleUpdateUser","editProfile","closeAllPopups","error","handleUpdateAvatar","editProfileAvatar","getUsersCards","cardList","usersCard","map","card","link","likes","cardId","_id","ownerId","owner","handleAddPlaceSubmit","addNewCard","newCard","handleCardLike","isLiked","some","user","deleteLike","state","item","addLike","stateCards","handleDeleteCard","deleteCard","filter","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","handleCardClick","handleTrashbinClick"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { api } from \"../utils/Api.js\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\"\nimport ImagePopup from \"./ImagePopup\";\nimport DeleteCardConfirmPopup from \"./DeleteCardConfirmPopup\";\nimport Footer from \"./Footer\";\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\n\nfunction App() {\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = useState(false);\n  const [isDeleteCardConfirmPopupOpen, setIsDeleteCardConfirmPopupOpen] = useState(false);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [currentUser, setCurrentUser] = useState({}); \n  const [cards, setCards] = useState([]); \n  const [removeCard, setRemoveCard] = useState(null);\n\n  useEffect(() => {\n      api.getProfile()\n        .then(userData => {\n          setCurrentUser({...userData,\n            userName: userData.name,\n            userDescription: userData.about,\n            userAvatar: userData.avatar\n          })\n        })\n        .catch((err) => console.log(`Ошибка...: ${err}`));\n    }, []); \n\n    function handleUpdateUser ({name, about}){\n      api.editProfile(name, about)\n      .then(userData => {\n        setCurrentUser({...userData,\n          userName: userData.name,\n          userDescription: userData.about,\n          userAvatar: userData.avatar\n        });\n        closeAllPopups();\n      }).catch(err => console.error(`Ошибка...: ${err}`));\n    };\n\n    function handleUpdateAvatar ({avatar}){\n      api.editProfileAvatar(avatar)\n      .then(userData => {\n        setCurrentUser({...userData,\n          \n          userAvatar: userData.avatar\n        });\n        closeAllPopups();\n      }).catch(err => console.error(`Ошибка...: ${err}`));\n    };\n\n  useEffect(() => {\n    api.getUsersCards()\n      .then((cardList) => {\n        //console.log(\"res\", cardList)\n        const usersCard = cardList.map((card) => {\n          return {\n            name: card.name,\n            link: card.link,\n            likes: card.likes,\n            cardId: card._id,\n            ownerId: card.owner._id\n          };\n        });\n        //console.log('usersCard', usersCard)\n        setCards(usersCard);\n      })\n      .catch((err) => console.log(`Ошибка...: ${err}`));\n  }, []);\n\n  function handleAddPlaceSubmit({name, link}) {\n    api.addNewCard(name, link)\n    .then (newCard => {\n      setCards([{\n        name: newCard.name,\n        link: newCard.link,\n        likes: newCard.likes,\n        cardId: newCard._id,\n        ownerId: newCard.owner._id\n      }, ...cards]);\n      closeAllPopups();\n    }).catch(err => console.error(`Ошибка...: ${err}`));\n  };\n\n\n  function handleCardLike(card) { // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(user => user._id === currentUser._id); // Отправляем запрос в API и получаем обновлённые данные карточки\n    \n  //   // Отправляем запрос в API и получаем обновлённые данные карточки\n  //   api.changeLikeCardStatus(card._id, !isLiked).then((newCard) => {\n  //     setCards((state) => state.map((c) => c._id === card._id ? newCard : c));\n  // });\n\n    if (isLiked){ //если карточка с лайком ==> удали лайк\n      api.deleteLike(card.cardId)\n      .then(newCard => { \n        setCards((state) => state.map((item) => {\n          if(item.cardId === card.cardId){\n            return{\n              name: newCard.name,\n              link: newCard.link,\n              likes: newCard.likes,\n              cardId: newCard._id,\n              ownerId: newCard.owner._id\n            }\n          } else return item;\n        }\n        // item.cardId === card.cardId ? newCard : item\n        ));\n      })\n      .catch(err => console.log(`Ошибка...: ${err}`))\n    } else { // если лайка нет ==> поставь лайк\n        api.addLike(card.cardId)\n          .then(newCard => { \n            //console.log(' поставить лайк', newCard)\n            setCards((stateCards) => stateCards.map((item) => {\n              if(item.cardId === card.cardId){\n                return{\n                  name: newCard.name,\n                  link: newCard.link,\n                  likes: newCard.likes,\n                  cardId: newCard._id,\n                  ownerId: newCard.owner._id\n                }\n              } else return item;\n            }\n            //item.cardId === card.cardId ? newCard : item\n            ));\n          })\n          .catch(err => console.log(`Ошибка...: ${err}`))\n      } \n   };\n\n  function handleDeleteCard() {\n    api.deleteCard(removeCard.cardId)\n    //console.log('pr', removeCard.cardId)\n      .then(() => {\n        //console.log('удалить карточку', res)\n        setCards((stateCards) => stateCards.filter((item) => \n        item.cardId !== removeCard.cardId));\n        closeAllPopups();\n      })\n      .catch(err => console.log(`Ошибка...: ${err}`))\n  };\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  };\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  };\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  };\n\n  function handleCardClick(card) {\n    // console.log(selectedCard)\n    setSelectedCard(card);\n  };\n\n  function handleTrashbinClick(card){\n    setIsDeleteCardConfirmPopupOpen(true)\n    setRemoveCard(card)\n  }\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n    setIsDeleteCardConfirmPopupOpen(false);\n  };\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n    <div className=\"page\">\n      <Header />\n      <Main\n        onEditAvatar={handleEditAvatarClick}\n        onEditProfile={handleEditProfileClick}\n        onAddPlace={handleAddPlaceClick}\n        onCardClick={handleCardClick}\n        onCardLike={handleCardLike}\n        // onCardDelete={handleDeleteCard} // меняем механику, переносим в компонент DeleteCardConfirmPopup\n        onCardDelete={handleTrashbinClick}\n        cards={cards}\n      />\n      <Footer />\n      {/* Модалка редактирования профиля */}\n      <EditProfilePopup\n        isOpen={isEditProfilePopupOpen} \n        onClose={closeAllPopups}\n        onUpdateUser={handleUpdateUser}>\n      </EditProfilePopup>\n\n      {/* Модалка смены аватара */}\n      <EditAvatarPopup\n        isOpen={isEditAvatarPopupOpen}\n        onClose={closeAllPopups}\n        onUpdateAvatar={handleUpdateAvatar}>\n      </EditAvatarPopup>\n      \n      {/* Модалка добавления карточки */}\n      <AddPlacePopup\n        isOpen={isAddPlacePopupOpen}\n        onClose={closeAllPopups}\n        onAddPlace={handleAddPlaceSubmit}>\n      </AddPlacePopup>\n\n      {/* Модалка удаления карточки */}\n      <DeleteCardConfirmPopup\n        isOpen={isDeleteCardConfirmPopupOpen}\n        onClose={closeAllPopups}\n        onConfirmCardDelete={handleDeleteCard}>\n      </DeleteCardConfirmPopup>\n      \n\n      {/* Модалка открытия картинки */}\n      <ImagePopup \n        card={selectedCard} \n        onClose={closeAllPopups} />\n    </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}