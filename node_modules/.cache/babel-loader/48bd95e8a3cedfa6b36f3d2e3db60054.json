{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._headers = headers; // здесь заложен уникальный токен авторизации тип контента\n\n    this._baseUrl = baseUrl; // https://mesto.nomoreparties.co/v1/cohort-39/ подставляется в fetch перед хвостом\n  }\n\n  getProfile() {\n    //console.log('getProfile');\n    return fetch(`${this._baseUrl}/users/me`, {\n      // применяем шаблонные строки ${}\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  getUsersCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      // 1. отправляем headers\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : //2. проверяем,  что сервер ответил успешно res.ok // 3. если успешно,  делаем из ответа объект res.json() \n    Promise.reject(res.status)); //4. если ответ не успешный,  то проваливаемся в ошибку  выводим catch\n  }\n\n  editProfile(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        // делаем из объекта строку для передачи данных\n        name,\n        about\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      // этот метод принимает данные на хранение, используется при загрузке файлов\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      // применяем шаблонные строки и id, который забираем из карточки во время удаления\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  deleteLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  addLike(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: \"PUT\",\n      headers: this._headers\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n  editProfileAvatar(avatar) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        // делаем из объекта строку для передачи данных\n        avatar\n      })\n    }).then(res => res.ok ? res.json() : Promise.reject(res.status));\n  }\n\n}\n\nexport const api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39',\n  // здесь указываем свою когорту\n  headers: {\n    authorization: '88e16114-a16c-404a-8007-3bb931ff1f77',\n    // здесь указываем свой токен\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["/Users/olgasivyuk/dev/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","baseUrl","headers","_headers","_baseUrl","getProfile","fetch","then","res","ok","json","Promise","reject","status","getUsersCards","editProfile","name","about","method","body","JSON","stringify","addNewCard","link","deleteCard","id","deleteLike","addLike","editProfileAvatar","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({baseUrl, headers}) {\n    this._headers = headers; // здесь заложен уникальный токен авторизации тип контента\n    this._baseUrl = baseUrl; // https://mesto.nomoreparties.co/v1/cohort-39/ подставляется в fetch перед хвостом\n  }\n  \n  getProfile() { \n    //console.log('getProfile');\n    return fetch(`${this._baseUrl}/users/me`, { // применяем шаблонные строки ${}\n      headers: this._headers\n   })\n    .then(res => res.ok ? res.json(): \n      Promise.reject(res.status))\n  }\n  \n  getUsersCards() { \n    return fetch(`${this._baseUrl}/cards`, { // 1. отправляем headers\n        headers: this._headers\n    })\n    .then(res => res.ok ? res.json():  //2. проверяем,  что сервер ответил успешно res.ok // 3. если успешно,  делаем из ответа объект res.json() \n      Promise.reject(res.status)) //4. если ответ не успешный,  то проваливаемся в ошибку  выводим catch\n  }\n  \n  editProfile(name, about) { \n    return fetch(`${this._baseUrl}/users/me`, {\n        method: \"PATCH\", \n        headers: this._headers,\n        body: JSON.stringify({ // делаем из объекта строку для передачи данных\n            name,\n            about\n        })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  addNewCard(name, link) { \n    return fetch(`${this._baseUrl}/cards`, {\n        method: \"POST\", // этот метод принимает данные на хранение, используется при загрузке файлов\n        headers: this._headers,\n        body: JSON.stringify({\n            name,\n            link\n          })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  deleteCard(id) { \n    return fetch(`${this._baseUrl}/cards/${id}`,{ // применяем шаблонные строки и id, который забираем из карточки во время удаления\n        method: \"DELETE\",\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  deleteLike(id) { \n    return fetch(`${this._baseUrl}/cards/${id}/likes`,{ \n        method: \"DELETE\",\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  addLike(id) { \n    return fetch(`${this._baseUrl}/cards/${id}/likes`,{ \n        method: \"PUT\",\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  editProfileAvatar(avatar) { \n    return fetch(`${this._baseUrl}/users/me/avatar`,{ \n        method: \"PATCH\",\n        headers: this._headers,\n        body: JSON.stringify({ // делаем из объекта строку для передачи данных\n          avatar\n      })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  \n  }\n  \n  export const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39', // здесь указываем свою когорту\n    headers: {\n      authorization: '88e16114-a16c-404a-8007-3bb931ff1f77', // здесь указываем свой токен\n      'Content-Type': 'application/json'\n    }\n  }); "]},"metadata":{},"sourceType":"module"}