{"ast":null,"code":"import _classCallCheck from\"/Users/olgasivyuk/dev/react-mesto-auth/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/olgasivyuk/dev/react-mesto-auth/node_modules/@babel/runtime/helpers/esm/createClass.js\";var Api=/*#__PURE__*/function(){function Api(_ref){var baseUrl=_ref.baseUrl,headers=_ref.headers;_classCallCheck(this,Api);this._headers=headers;// здесь заложен уникальный токен авторизации тип контента\nthis._baseUrl=baseUrl;// https://mesto.nomoreparties.co/v1/cohort-39/ подставляется в fetch перед хвостом\n}_createClass(Api,[{key:\"getProfile\",value:function getProfile(){//console.log('getProfile');\nreturn fetch(\"\".concat(this._baseUrl,\"/users/me\"),{// применяем шаблонные строки ${}\nheaders:this._headers}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"getUsersCards\",value:function getUsersCards(){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{// 1. отправляем headers\nheaders:this._headers}).then(function(res){return res.ok?res.json()://2. проверяем,  что сервер ответил успешно res.ok // 3. если успешно,  делаем из ответа объект res.json() \nPromise.reject(res.status);});//4. если ответ не успешный,  то проваливаемся в ошибку  выводим catch\n}},{key:\"editProfile\",value:function editProfile(name,about){return fetch(\"\".concat(this._baseUrl,\"/users/me\"),{method:'PATCH',headers:this._headers,body:JSON.stringify({// делаем из объекта строку для передачи данных\nname:name,about:about})}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"addNewCard\",value:function addNewCard(name,link){return fetch(\"\".concat(this._baseUrl,\"/cards\"),{method:'POST',// этот метод принимает данные на хранение, используется при загрузке файлов\nheaders:this._headers,body:JSON.stringify({name:name,link:link})}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"deleteCard\",value:function deleteCard(id){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(id),{// применяем шаблонные строки и id, который забираем из карточки во время удаления\nmethod:'DELETE',headers:this._headers}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"deleteLike\",value:function deleteLike(id){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(id,\"/likes\"),{method:'DELETE',headers:this._headers}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"addLike\",value:function addLike(id){return fetch(\"\".concat(this._baseUrl,\"/cards/\").concat(id,\"/likes\"),{method:'PUT',headers:this._headers}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}},{key:\"editProfileAvatar\",value:function editProfileAvatar(avatar){return fetch(\"\".concat(this._baseUrl,\"/users/me/avatar\"),{method:'PATCH',headers:this._headers,body:JSON.stringify({// делаем из объекта строку для передачи данных\navatar:avatar})}).then(function(res){return res.ok?res.json():Promise.reject(res.status);});}}]);return Api;}();export var api=new Api({baseUrl:'https://mesto.nomoreparties.co/v1/cohort-39',// здесь указываем свою когорту\nheaders:{authorization:'88e16114-a16c-404a-8007-3bb931ff1f77',// здесь указываем свой токен\n'Content-Type':'application/json'}});","map":{"version":3,"sources":["/Users/olgasivyuk/dev/react-mesto-auth/src/utils/Api.js"],"names":["Api","baseUrl","headers","_headers","_baseUrl","fetch","then","res","ok","json","Promise","reject","status","name","about","method","body","JSON","stringify","link","id","avatar","api","authorization"],"mappings":"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","sourcesContent":["class Api {\n  constructor({baseUrl, headers}) {\n    this._headers = headers; // здесь заложен уникальный токен авторизации тип контента\n    this._baseUrl = baseUrl; // https://mesto.nomoreparties.co/v1/cohort-39/ подставляется в fetch перед хвостом\n  }\n  \n  getProfile() { \n    //console.log('getProfile');\n    return fetch(`${this._baseUrl}/users/me`, { // применяем шаблонные строки ${}\n      headers: this._headers\n   })\n    .then(res => res.ok ? res.json(): \n      Promise.reject(res.status))\n  }\n  \n  getUsersCards() { \n    return fetch(`${this._baseUrl}/cards`, { // 1. отправляем headers\n        headers: this._headers\n    })\n    .then(res => res.ok ? res.json():  //2. проверяем,  что сервер ответил успешно res.ok // 3. если успешно,  делаем из ответа объект res.json() \n      Promise.reject(res.status)) //4. если ответ не успешный,  то проваливаемся в ошибку  выводим catch\n  }\n  \n  editProfile(name, about) { \n    return fetch(`${this._baseUrl}/users/me`, {\n        method: 'PATCH', \n        headers: this._headers,\n        body: JSON.stringify({ // делаем из объекта строку для передачи данных\n            name,\n            about\n        })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  addNewCard(name, link) { \n    return fetch(`${this._baseUrl}/cards`, {\n        method: 'POST', // этот метод принимает данные на хранение, используется при загрузке файлов\n        headers: this._headers,\n        body: JSON.stringify({\n            name,\n            link\n          })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  deleteCard(id) { \n    return fetch(`${this._baseUrl}/cards/${id}`,{ // применяем шаблонные строки и id, который забираем из карточки во время удаления\n        method: 'DELETE',\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  deleteLike(id) { \n    return fetch(`${this._baseUrl}/cards/${id}/likes`,{ \n        method: 'DELETE',\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  addLike(id) { \n    return fetch(`${this._baseUrl}/cards/${id}/likes`,{ \n        method: 'PUT',\n        headers: this._headers,\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  editProfileAvatar(avatar) { \n    return fetch(`${this._baseUrl}/users/me/avatar`,{ \n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({ // делаем из объекта строку для передачи данных\n          avatar\n      })\n    })\n    .then(res => res.ok ? res.json():\n      Promise.reject(res.status))\n  }\n\n  \n  }\n  \n  export const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-39', // здесь указываем свою когорту\n    headers: {\n      authorization: '88e16114-a16c-404a-8007-3bb931ff1f77', // здесь указываем свой токен\n      'Content-Type': 'application/json'\n    }\n  }); "]},"metadata":{},"sourceType":"module"}